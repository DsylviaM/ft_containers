Preliminary tests
If cheating is suspected, the evaluation stops here. Use the "Cheat" flag to report it. Take this decision calmly, wisely, and please, use this button with caution.
Prerequisites
The code must compile with c++ and the flags -Wall -Wextra -Werror.

The code should also compile with the flag -std=c++98

Don't forget this project has to follow the C++98 standard. Thus, 
C++11 (and later) functions or containers are NOT expected.

Any of these means you must not grade the exercise in question:
- A function is implemented in a header file (except for template 
functions).
- A Makefile compiles without the required flags and/or another 
compiler than c++.

Any of these means that you must flag the project with "Forbidden 
Function":
- Use of a "C" function (*alloc, *printf, free).
- Use of a function not allowed in the exercise guidelines.
- Use of "using namespace " or the "friend" keyword (in this project, the "friend" keyword is allowed for specific uses, you'll see).- Use of an external library, or features from versions other than C++98.- Use of a STL container to implement another container.
Yes
No

Mandatory part
Verify that each mandatory container is correctly implemented. If the vector or the map is missing, check the 'Incomplete work' flag. But note the project can be passed without the stack. Do not hesitate to ask to the evaluated student what is the reference they used. A main.cpp is available to download on this page. It should compile with the student's containers. The evaluated student has also to turn in their own tests.
Vector - Basics
Make sure that every member function, non-member function and overload is 
present and works as expected. Same thing for iterators.
Use the STL container to check that everything works the same way.
Yes
No
Vector - Advance
- The inner data structure should be a dynamic array.
- const_iterator and iterators should be comparable.
- Check the dynamic reallocation system.
- Test the swap() function: 
After swap, all the iterators, pointers and references pointing to 
elements in both containers remain valid and are now pointing to the 
same elements than before the call but in the other container (where 
they now iterate).
- Check that the friend keyword is used only for the relational operators.
Yes
No
Vector - Performance
Make sure that the speed is reasonable compared to the STL container! 
For example, a deep copy should allocate all the memory in one call.
Yes
No
Map - Basics
Make sure that every member function, non-member function and overload is 
present and works as expected. Same thing for iterators.
Use the STL container to check that everything works the same way.
Yes
No
Map - Advance
- Check the inner structure. It should be an ordered tree (AVL tree, 
Red-Black tree, and so forth). For example, a simple array is not ok.
- Verify that pair<> is recoded and used.
- Verify that ft::make_pair() behaves as expected.
- There mustn't be several identical keys. Each key must be unique in map.
- Check that the keys are sorted using the comparison function (see 
Compare).
- Check std::allocator and allocator::rebind are used and there's no 
direct usage of new (rebind could be used in the tree).
- Check that insertion and deletion (erase) do not invalidate iterators.
- The swap() function should not move data but only pointers.
- Check that the friend keyword is used only for the relational operators 
and map::value_compare.
- There's no memory leak.
Yes
No
Map - Performance
Make sure that the speed is reasonable compared to the STL container! 

Slower than the STL map is ok. 
A complete timeout is not. 
If it's more than 20 times slower than the map STL, count it false.
Yes
No
Stack - Basics
Make sure that every member function, non-member function and overload is 
present and works as expected.
Use the STL container to check that everything works the same way.
Yes
No
Stack - Advance
- The default underlying container must be the vector of the student.
- The underlying container must be protected and not private!
- The standard containers vector, deque and list are compatible as
underlying containers.
- The stack cannot be iterate.
Yes
No

Bonus part
Evaluate the bonus part if, and only if, the mandatory part has been entirely and perfectly done, and the error management handles unexpected or bad usage. In case all the mandatory points were not passed during the defense, bonus points must be totally ignored.
Set
Make sure that every member function, non-member function and overload is 
present and works as expected. Same thing for iterators.
Use the STL container to check that everything works the same way.

The inner data structure must be a Red-Black tree.

Ask the evaluated student for details. How does it work? If you have any 
doubt, don't validate this bonus as the set is easier than the map.

The only bonus here is for the Red-Black tree!
Yes
No
/////////////////////////////////////////////////
#preparation for project delivery

подготовка для сдачи проекта

Preliminary tests

Код должен компилироваться с помощью c++ и флагов -Wall -Wextra -Werror.
Код также должен компилироваться с флагом -std=c++98.
Не забывайте, что этот проект должен соответствовать стандарту C++98. Таким образом,
Функции или контейнеры С++ 11 (и более поздних версий) НЕ ожидаются.
Любое из этих значений означает, что вы не должны оценивать рассматриваемое упражнение:
- Функция реализована в заголовочном файле (кроме шаблонного
функции).//h файлы
- Makefile компилируется без необходимых флагов и/или других
компилятор, чем С++. Нельзя:
- Использование функции "C" (*alloc, *printf, free).
- Использование функции, не разрешенной в инструкции по упражнению.
- Использование «использования пространства имен» или ключевого слова «друг» (в этом проекте ключевое слово «друг» разрешено для определенных целей, как вы увидите). - Использование внешней библиотеки или функций версий, отличных от C++98. - Использование контейнера STL для реализации другого контейнера.

Mandatory part (обязательная часть)

проект можно передать без стека. Не стесняйтесь спрашивать оцениваемого студента, какую ссылку он использовал. На этой странице можно скачать файл main.cpp. Он должен компилироваться с контейнерами студента. Оцениваемый студент также должен сдать свои собственные тесты.

Используйте контейнер STL, чтобы убедиться, что все работает одинаково. //Показать свои тесты
Да
Нет

Vector - Advance

- Внутренняя структура данных должна быть динамическим массивом.
- const_iterator и итераторы должны быть сопоставимы.
- Проверьте систему динамического перераспределения.
//здесь нужно показать емкость(капасити и размер) по сути разница
- Протестируйте функцию swap():
После замены все итераторы, указатели и ссылки, указывающие на
элементы в обоих контейнерах остаются действительными и теперь указывают на
те же элементы, что и до вызова, но в другом контейнере (где
теперь они повторяются).
- Убедитесь, что ключевое слово друга используется только для операторов отношения.
Да
Нет

Vector - Performance (Производительность)

Убедитесь, что скорость разумна по сравнению с контейнером STL!
Например, глубокая копия должна выделять всю память за один вызов.
Да
Нет

Map - Basics

Убедитесь, что каждая функция-член, функция, не являющаяся членом, и перегрузка
присутствует и работает как положено. То же самое для итераторов.
Используйте контейнер STL, чтобы убедиться, что все работает одинаково.
Да
Нет

Map - Advance

- Проверьте внутреннюю структуру. Это должно быть упорядоченное дерево (AVL-дерево,
Красно-черное дерево и так далее). Например, простой массив не подходит.
- Убедитесь, что пара<> перекодирована и используется.
- Убедитесь, что ft::make_pair() ведет себя так, как ожидалось.
- Не должно быть нескольких одинаковых ключей. Каждый ключ должен быть уникальным в карте.
- Убедитесь, что ключи отсортированы с помощью функции сравнения (см.
Сравнивать).
- Убедитесь, что std::allocator и allocator::rebind используются и нет
прямое использование new (можно использовать перепривязку в дереве).
- Убедитесь, что вставка и удаление (стирание) не делают итераторы недействительными.
- Функция swap() не должна перемещать данные, а только указатели.
- Убедитесь, что ключевое слово друга используется только для реляционных операторов.
и map::value_compare.
- Утечек памяти нет.
Да
Нет

Map - Performance

Убедитесь, что скорость разумна по сравнению с контейнером STL!
Медленнее, чем карта STL, это нормально.
Полного таймаута нет.
Если он более чем в 20 раз медленнее, чем карта STL, считайте его ложным.
Да
Нет


Stack - Basics

Убедитесь, что каждая функция-член, функция, не являющаяся членом, и перегрузка
присутствует и работает как положено.
Используйте контейнер STL, чтобы убедиться, что все работает одинаково.
Да
Нет

Stack - Advance

- Базовый контейнер по умолчанию должен быть вектором студента.
- Базовый контейнер должен быть защищен, а не приватен!
- Стандартные контейнеры vector, deque и list совместимы как
базовые контейнеры.
- Стек не может быть повторен.
Да
Нет

Бонусная часть
Оценивайте бонусную часть тогда и только тогда, когда обязательная часть была полностью и идеально выполнена, а управление ошибками обрабатывает неожиданное или неправильное использование. В случае, если при защите не были пройдены все обязательные баллы, бонусные баллы должны быть полностью проигнорированы.
Установлен
Убедитесь, что каждая функция-член, функция, не являющаяся членом, и перегрузка
присутствует и работает как положено. То же самое для итераторов.
Используйте контейнер STL, чтобы убедиться, что все работает одинаково.

Внутренняя структура данных должна быть красно-черным деревом.

Спросите у оцениваемого студента подробности. Как это работает? Если у тебя есть
сомневаюсь, не проверяйте этот бонус, так как сет проще, чем карта.

Бонус здесь только за красно-черное дерево!
Да
Нет
